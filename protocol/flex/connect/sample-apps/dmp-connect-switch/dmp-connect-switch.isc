#ISD afv6
# ISD version: 4.18.1.qualifier

# Application configuration
appId: flex
frameworkRoot: protocol/flex_dev/connect
architecture: efr32~family[M]~series[1]~device_configuration[2]~performance[P]~radio[433]~flash[1024K]~temp[G]~package[M]~pins[68]~!module+BRD4170A+gcc
deviceName: dmp-connect-switch
generationDirectory: PATH(ISC_RELATIVE):.

# Devices

# Plugin configuration
appPlugin: antenna-stub=true
appPlugin: ash-v3=false
appPlugin: ble=true
appPlugin: bootloader-interface=false
appPlugin: buffer-pool-memory-manager=false
appPlugin: circular-queue=false
appPlugin: command-interpreter=true
appPlugin: command-interpreter-rail=false
appPlugin: csp-host=false
appPlugin: csp-ncp=false
appPlugin: debug-print=true
appPlugin: diagnostic=true
appPlugin: diagnostic-stub=false
appPlugin: free-rtos=false
appPlugin: dmp-demo-ui=true
appPlugin: frequency-hopping=false
appPlugin: hal=true
appPlugin: hal-config=true
appPlugin: hal-efr32=false
appPlugin: heartbeat=true
appPlugin: host-network-management-cli=false
appPlugin: idle-sleep=false
appPlugin: lcd-graphics=true
appPlugin: mailbox-client=false
appPlugin: mailbox-server=false
appPlugin: main=true
appPlugin: ncp-main=false
appPlugin: mbedtls=true
appPlugin: micrium-rtos=true
appPlugin: ncp-uart-link=false
appPlugin: nvm3=true
appPlugin: ota-bootloader-test-common=false
appPlugin: ota-broadcast-bootloader-client=false
appPlugin: ota-broadcast-bootloader-server=false
appPlugin: ota-broadcast-bootloader-test=false
appPlugin: ota-unicast-bootloader-client=false
appPlugin: ota-unicast-bootloader-server=false
appPlugin: ota-unicast-bootloader-test=false
appPlugin: packet-trace=false
appPlugin: poll=true
appPlugin: rail-app-config=false
appPlugin: rail-library=false
appPlugin: rail-library-mp=true
appPlugin: railtest-base=false
appPlugin: railtest-ram-modem-reconfiguration=false
appPlugin: rangetest-base=false
appPlugin: response-printf=false
appPlugin: serial=true
appPlugin: serial-bootloader-cli=false
appPlugin: sim-eeprom1=false
appPlugin: sim-eeprom2=false
appPlugin: sim-eeprom2-1to2-upgrade=false
appPlugin: sim-eeprom2-1to2-upgrade-stub=false
appPlugin: sim-eeprom2-to-nvm3-upgrade-stub=true
appPlugin: spi-flash=false
appPlugin: stack-aes-security=true
appPlugin: stack-common=true
appPlugin: stack-counters=true
appPlugin: stack-mac-queue=true
appPlugin: stack-parent-support=false
appPlugin: stack-xxtea-security=false
appPlugin: unix-library=false
appPlugin: usb-cdc=false
appPlugin: usb-common=false
appPlugin: usb-hidkbd=false
appPlugin: wstk-sensors=false

# Setup configurations
{setupId:additionalFiles
}
{setupId:bleGattConfigurator
<?xml version="1.0" encoding="UTF-8"?><project>
  <gatt generic_attribute_service="true" header="gatt_db.h" name="Custom BLE GATT" out="gatt_db.c" prefix="gattdb_">
    <service advertise="false" id="device_information" name="Device Information" requirement="mandatory" sourceId="org.bluetooth.service.device_information" type="primary" uuid="180A">
      <informativeText>Abstract: The Device Information Service exposes manufacturer and/or vendor information about a device. Summary: This service exposes manufacturer information about a device. The Device Information Service is instantiated as a Primary Service. Only one instance of the Device Information Service is exposed on a device. </informativeText>
      <characteristic id="manufacturer_name_string" name="Manufacturer Name String" sourceId="org.bluetooth.characteristic.manufacturer_name_string" uuid="2A29">
        <informativeText>Abstract: The value of this characteristic is a UTF-8 string representing the name of the manufacturer of the device. </informativeText>
        <value length="12" type="utf-8" variable_length="true">Silicon Labs</value>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="excluded" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="excluded"/>
      </characteristic>
      <characteristic id="model_number_string" name="Model Number String" sourceId="org.bluetooth.characteristic.model_number_string" uuid="2A24">
        <informativeText>Abstract: The value of this characteristic is a UTF-8 string representing the model number of the device. </informativeText>
        <value length="8" type="utf-8" variable_length="false">DMP-001A</value>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="optional" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="excluded"/>
      </characteristic>
      <characteristic id="serial_number_string" name="Serial Number String" sourceId="org.bluetooth.characteristic.serial_number_string" uuid="2A25">
        <informativeText>Abstract: The value of this characteristic is a UTF-8 string representing the serial number of the device. </informativeText>
        <value length="3" type="utf-8" variable_length="false">001</value>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="excluded" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="excluded"/>
      </characteristic>
      <characteristic id="firmware_revision_string" name="Firmware Revision String" sourceId="org.bluetooth.characteristic.firmware_revision_string" uuid="2A26">
        <informativeText>Abstract: The value of this characteristic is a UTF-8 string representing the firmware version of the device. </informativeText>
        <value length="5" type="utf-8" variable_length="false">0.0.1</value>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="excluded" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="excluded"/>
      </characteristic>
    </service>
    <service advertise="false" id="device_information" name="Generic Access" requirement="mandatory" sourceId="org.bluetooth.service.generic_access" type="primary" uuid="1800">
      <informativeText>Abstract: The generic_access service contains generic information about the device. All available Characteristics are readonly. </informativeText>
      <characteristic id="device_name" name="Device Name" sourceId="org.bluetooth.characteristic.gap.device_name" uuid="2A00">
        <informativeText/>
        <value length="8" type="utf-8" variable_length="true">DMP Demo</value>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="excluded" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="optional"/>
      </characteristic>
      <characteristic id="appearance" name="Appearance" sourceId="org.bluetooth.characteristic.gap.appearance" uuid="2A01">
        <informativeText/>
        <value length="2" type="hex" variable_length="false"/>
        <properties indicate="false" indicate_requirement="excluded" notify="false" notify_requirement="excluded" read="true" read_requirement="mandatory" reliable_write="false" reliable_write_requirement="excluded" write="false" write_no_response="false" write_no_response_requirement="excluded" write_requirement="excluded"/>
      </characteristic>
    </service>
    <service advertise="false" name="Silabs DMP Switch" requirement="mandatory" sourceId="" type="primary" uuid="62792313-adf2-4fc9-974d-fab9ddf2622c">
      <informativeText/>
      <characteristic id="light_state" name="Light" sourceId="custom.type" uuid="76e137ac-b15f-49d7-9c4c-e278e6492ad9">
        <informativeText/>
        <value length="1" type="user" variable_length="false">0x00</value>
        <properties indicate="true" indicate_requirement="optional" read="true" read_requirement="optional" write="true" write_requirement="optional"/>
      </characteristic>
      <characteristic id="trigger_source" name="Trigger Source" sourceId="custom.type" uuid="2f16ee52-0bfd-4597-85d4-a5141fdbae15">
        <informativeText/>
        <value length="1" type="user" variable_length="false">0x00</value>
        <properties indicate="true" indicate_requirement="optional" read="true" read_requirement="optional" write="true" write_requirement="optional"/>
      </characteristic>
      <characteristic id="source_address" name="Source Address" sourceId="custom.type" uuid="82a1cb54-3921-4c9c-ba34-34f78bab9a1b">
        <informativeText/>
        <value length="8" type="user" variable_length="false">0x00</value>
        <properties indicate="true" indicate_requirement="optional" read="true" read_requirement="optional"/>
      </characteristic>
    </service>
    <service advertise="false" name="Silicon Labs OTA" requirement="mandatory" sourceId="custom.type" type="primary" uuid="a72615a9-1662-4646-9482-d91cbe23e1a0">
      <informativeText>Custom service</informativeText>
      <characteristic id="ota_control" name="Silicon Labs OTA Control" sourceId="com.silabs.characteristic.ota_control" uuid="57e17031-aba9-42c1-af0e-824220fef407">
        <informativeText>Custom characteristic</informativeText>
        <value length="1" type="user" variable_length="false">0x00</value>
        <properties write="true" write_requirement="optional"/>
      </characteristic>
    </service>
  </gatt>
</project>
}
{setupId:boardHeader
allowMissingHeader:false
useHeaderInPlace:false
efr32~family[M]~series[1]~device_configuration[2]~performance[P]~radio[433]~flash[1024K]~temp[G]~package[M]~pins[68]+BRD4170A=USE_HARDWARE_CONFIGURATOR,,,
}
{setupId:bookkeeping
}
{setupId:bootloader
efr32~series[1]~device_configuration[1]=null,
efr32~series[1]~device_configuration[2]=null,
efr32~series[1]~device_configuration[3]=null,
efr32~series[1]~device_configuration[4]=null,
}
{setupId:callbackConfiguration
emberIncomingMessageHandler:true
emberMessageSentHandler:true
emberStackStatusHandler:true
emberChildJoinHandler:true
emberAfMainInitCallback:false
emberAfMainTickCallback:false
emberAfStackStatusCallback:false
emberAfIncomingMessageCallback:false
emberAfMessageSentCallback:false
emberAfChildJoinCallback:false
emberAfPluginMicriumRtosAppTask1InitCallback:false
emberAfPluginMicriumRtosAppTask1MainLoopCallback:false
emberAfPluginBleEventCallback:false
emberAfPluginBleGetConfigCallback:false
emberAfHalButtonIsrCallback:false
emberAfIncomingBeaconExtendedCallback:false
emberAfActiveScanCompleteCallback:false
}
{setupId:commandLineConfiguration
on
start-slave,startSlaveCommand,u,unlocked
start-sleepy-slave,startSleepySlaveCommand,u,unlocked
set-tx-power,setTxPowerCommand,s,unlocked
set-tx-options,setTxOptionsCommand,u,unlocked
leave,emberResetNetworkState,,unlocked
data,dataCommand,b,unlocked
info,infoCommand,,unlocked
reset,halReboot,,unlocked
}
{setupId:connectStackConfig
Radio board: BRD4170
}
{setupId:debugConfiguration
on
area name off
appSerial=1
}
{setupId:multiPhyRadioConfigurator
<?xml version="1.0" encoding="UTF-8"?>
<multi_phy_configuration part_family="jumbo" part_revision="A0" rail_adapter_version="rail_api_2.x" status_code="0" xsd_version="0.0.13">
  <base_channel_configurations>
    <base_channel_configuration name="Protocol Configuration" profile="serializableObject:Efr32RadioConfiguratorProfile:JUMBO:Connect">
      <phy name="serializableObject:Efr32RadioConfiguratorPhy:JUMBO:Connect:PHY_Connect_863MHz_2GFSK_100kbps"/>
      <channel_config_entries>
        <channel_config_entry name="Channel Group 1">
          <physical_channel_offset>0</physical_channel_offset>
          <channel_number_start>0</channel_number_start>
          <channel_number_end>20</channel_number_end>
          <max_power>RAIL_TX_POWER_MAX</max_power>
        </channel_config_entry>
      </channel_config_entries>
    </base_channel_configuration>
  </base_channel_configurations>
</multi_phy_configuration>
}
{setupId:eventConfiguration
lcdDirectionDisplayEventControl,lcdDirectionDisplayEventHandler
responseTimeoutTmrEventControl,responseTimeoutTmrEventHandler
sendRetryTmrEventControl,sendRetryTmrEventHandler
}
{setupId:genConfig
}
{setupId:hwConfig
featureLevel=1
active=true
}
{setupId:information
\{key:description
The DMP Connect Switch application demonstrates the dynamic multiprotocol feature from Silicon Labs. In particular, this application demonstrates the Connect and BLE stacks running concurrently as MicriumOS tasks.

The Demo is set up to run on the WSTK6000B Mesh Development Kit. The Demo makes use of the LCD display, LEDs and Buttons on the WSTK.

The Switch is configured to join a Connect network as a Sleepy End Device. A button press initiates an active scan on all the channels and if a matching beacon is received from the Connect Light and permit join is enabled at the Connect Light the Switch joins the network as a sleepy end device. The Switch can send a Connect message to set the Light state. The Switch also periodically obtains the Light state over the Connect network and displays it on the LCD display (the bulb icon).

On the BLE interface the Switch is setup to advertise itself using Eddystone and iBeacon in an alternate manner. The Switch advertises itself as available for a connection by a smartphone running Wireless Gecko application. Once connected the user can control the Light (represented by LEDs on the WSTK board) using Wireless Gecko smartphone application through the Switch BLE connection.

A change of the Light state can be initiated by the either the smartphone application over the BLE connection via the dynamic multiprotocol (Connect+BLE) Switch or by the Switch application itself and it is propagated to the connected devices over both the Connect and BLE interfaces.

Upon startup, a help screen is shown on the LCD display to assist the user to join and leave the network and to control the Light.
PB0 - Toggle Light
PB1 - NWK Control [ No NWK : Join NWK  /  Press > 5s: Leave NWK ]

All application code is contained in the flex-callbacks.c files within each application directory.
\}
}
{setupId:macros
-DMBEDTLS_CONFIG_FILE="application/mbedtls-security-config-dmp.h"
-DDEVICE_TYPE="Switch"
-DAPP_SECURITY_ENABLE=1
}
{setupId:phyOptions
}
{setupId:template
linkerLdFile=$--halDir--$/micro/cortexm3/efm32/gcc-cfg.ld
}
{setupId:token
}

# UI/Setup customization for multi-phy
hiddenLayoutElements: radio

# Plugin options
pluginOption(efr32): EMBER_AF_PLUGIN_MBEDTLS_APP_HEADER_DEFINED,true
pluginOption(efr32): EMBER_AF_PLUGIN_MICRIUM_RTOS_APP_TASK1,true
pluginOption(efr32): EMBER_AF_PLUGIN_MICRIUM_RTOS_POLL_CLI,false
pluginOption(efr32): EMBER_AF_PLUGIN_MICRIUM_RTOS_MAX_CALLBACK_QUEUE_SIZE,20
pluginOption(efr32): EMBER_AF_PLUGIN_MICRIUM_RTOS_APP_FRAMEWORK_STACK_SIZE,1000
pluginOption(efr32): EMBER_AF_PLUGIN_MICRIUM_RTOS_APP_TASK1_STACK_SIZE,400
