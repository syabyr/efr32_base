name=BLE
description=If this plugin is enabled, the BLE stack will be run in parallel with the Connect stack. Both stacks run as Micrium OS tasks.

category=Connect Utility
qualityString=Production Ready
quality=production
includedByDefault=false

architecture=efr32

needsSetup=bleGattConfigurator

# This makes the plugin not throw an error if files are missing, but only show it as disabled.
missingFileHandling=disable

providedApis=ble
#requiredApis=micrium-rtos,mbedtls-micrium
requiredApis=micrium-rtos,radio-multiprotocol-support
api.ble.header=ble-interface.h

callbacks=callbacks.info

sourceFiles=$BLUETOOTH_PROTOCOL/ble_stack/src/soc/rtos_bluetooth.c,ble-interface.c,ble-cli.c,ble-interface-cb.c

setup(additionalFiles) {
  PATH(ABSOLUTE):$BLUETOOTH_PROTOCOL/ble_stack/inc/common
  PATH(ABSOLUTE):$BLUETOOTH_PROTOCOL/ble_stack/inc/soc
  #PATH(ABSOLUTE):$EMDRV/nvm3/inc
}

setup(template) {
  mallocHeapSize=8192
}

# Dumbo = EFR32<family>G<series><performance> + IAR
precompiled(efr32~series[1]~device_configuration[1]+iar) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.performance--$/IAR/libbluetooth.a
}

# Jumbo, Nerio, Nixi = EFR32<family>G<series><config><performance> + IAR
precompiled(efr32~series[1]~device_configuration[2]+iar) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/IAR/libbluetooth.a
}

precompiled(efr32~series[1]~device_configuration[3]+iar) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/IAR/libbluetooth.a
}

precompiled(efr32~series[1]~device_configuration[4]+iar) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/IAR/libbluetooth.a
}

# No Panther in Connect
# Panther = EFR32<family>G<series><config> + IAR
#precompiled((efr32~series[2]+iar) {
#  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$/IAR/libbluetooth.a
#}

# Dumbo = EFR32<family>G<series><performance> + GCC
precompiled(efr32~series[1]~device_configuration[1]+gcc) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.performance--$/GCC/libbluetooth.a
}

# Jumbo, Nerio, Nixi = EFR32<family>G<series><config><performance> + GCC
precompiled(efr32~series[1]~device_configuration[2]+gcc) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/GCC/libbluetooth.a
}

precompiled(efr32~series[1]~device_configuration[3]+gcc) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/GCC/libbluetooth.a
}

precompiled(efr32~series[1]~device_configuration[4]+gcc) {
  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$$--partHardware.performance--$/GCC/libbluetooth.a
}

# No Panther in Connect
# Panther = EFR32<family>G<series><config> + GCC
#precompiled((efr32~series[2]+gcc) {
#  file=$BLUETOOTH_PROTOCOL/lib/EFR32$--partHardware.family--$G$--partHardware.series--$$--partHardware.device_configuration--$/GCC/libbluetooth.a
#}

setup(bookkeeping) {
  tick=emberAfPluginBleTickCallback
}

setup(commandLineConfiguration) {
  ble   hello,                                emberAfPluginBleHelloCommand
  ble   get address,                          emberAfPluginBleGetAddressCommand
  ble   gap set-mode,                         emberAfPluginBleSetGapModeCommand,                        uu
  ble   gap set-bt5-mode,                     emberAfPluginBleSetBt5GapModeCommand,                     uuuvu
  ble   gap discover,                         emberAfPluginBleGapDiscoverCommand,                       u
  ble   gap conn-open,                        emberAfPluginBleGapConnectionOpenCommand,                 bu
  ble   gap conn-close,                       emberAfPluginBleConnectionCloseCommand,                   u  
  ble   gap set-adv-params,                   emberAfPluginBleSetAdvertisementParamsCommand,            vvu
  ble   gap set-conn-params,                  emberAfPluginBleGapSetConnectionParamsCommand,            vvvv
  ble   gap update-conn-params,               emberAfPluginBleConnectionSetParamsCommand,               vvvvv
  ble   sm increase-security,                 emberAfPluginBleSecurityManagerIncreaseSecurityCommand,   u
  ble   sm list-all-bondings,                 emberAfPluginBleSecurityManagerListAllBondingsCommand
  ble   sm delete-bonding,                    emberAfPluginBleSecurityManagerDeleteBondingCommand,      u
  ble   sm delete-all-bondings,               emberAfPluginBleSecurityManagerDeleteAllBondingsCommand
  ble   sm set-bondable-mode,                 emberAfPluginBleSecurityManagerSetBondableModeCommand,    u
  ble   gatt discover-primary-services,       emberAfPluginBleGattDiscoverPrimaryServicesCommand,       u
  ble   gatt discover-characterstics,         emberAfPluginBleGattDiscoverCharacteristicsCommand,       uw
  ble   gatt set-characteristic-notification, emberAfPluginBleGattSetCharacteristicNotificationCommand, uvu
  ble   gatt write-characterstic,             emberAfPluginBleGattWriteCharacteristicValueCommand,      uvub
}

options=maxConnections,bleStackSize,linkLayerStackSize

maxConnections.name=Max number of BLE connections
maxConnections.description=The maximum number of simultanous BLE connections the device can establish.
maxConnections.type=NUMBER:1,10
maxConnections.default=3

bleStackSize.name=Stack Task call stack size
bleStackSize.description=The size in 32-bit words of the Bluetooth stack task call stack
bleStackSize.type=NUMBER:25,2500
bleStackSize.default=375
bleStackSize.define=BLUETOOTH_STACK_SIZE

linkLayerStackSize.name=Link Layer Task call stack size
linkLayerStackSize.description=The size in 32-bit words of the Bluetooth Link Layer task call stack
linkLayerStackSize.type=NUMBER:25,2500
linkLayerStackSize.default=250
linkLayerStackSize.define=LINKLAYER_STACK_SIZE